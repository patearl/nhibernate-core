using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NHibernate.Type;

namespace NHibernate.CommonQueryModel.Ast
{
    /// <summary>
    /// Parallels a SQL query in structure, with elements like joins, select, and where clauses.
    /// Subqueries are also represented by this type.
    /// </summary>
    public class CommonQuery// : QueryNode
    {
        //private IType[] _resultTypes; // In-order list of result types generated by this query.  Actually, shouldn't we not care about the order but rather the aliases?  Actually, it seems we shouldn't generate the aliases so soon.  We need a concept of not in order result types?  Different query parts cause us to generate different stuff.  Should we alias afterwards?
        //private RowSet From; // Ooh, we can't have this because we might not have an actual type to select from... might even be another query.
        // We can be selecting from either a table, or a query.AST
        // ResultSet

        // We start by selecting a single type.
        private IRowSet From { get; set; }
        private IBooleanExpression Where { get; set; }

        // How should a property refer to its query source?  It may be from an outside query when we're in a subquery.
    }
}
